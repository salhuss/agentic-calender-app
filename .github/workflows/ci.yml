name: CI/CD Pipeline

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run backend linting
      working-directory: ./backend
      run: |
        ruff check .
        ruff format --check .
        mypy .

    - name: Run backend tests with coverage
      working-directory: ./backend
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html tests/
      env:
        DATABASE_URL: sqlite:///./test.db
        TEST_DATABASE_URL: sqlite:///./test.db

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload backend test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results-${{ matrix.python-version }}
        path: |
          backend/htmlcov/
          backend/coverage.xml
          backend/test-results.xml
        retention-days: 30

  frontend-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: |
        npm run lint
        npm run type-check

    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/dist/
        retention-days: 30

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Clean up any existing processes on ports
      run: |
        # Kill any processes on port 8000 (backend)
        if lsof -ti:8000 > /dev/null 2>&1; then
          echo "Killing process on port 8000"
          lsof -ti:8000 | xargs kill -9 || true
        fi
        # Kill any processes on port 5173 (frontend)
        if lsof -ti:5173 > /dev/null 2>&1; then
          echo "Killing process on port 5173"
          lsof -ti:5173 | xargs kill -9 || true
        fi

    - name: Start backend server
      working-directory: ./backend
      run: |
        alembic upgrade head
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        echo $! > backend.pid
        sleep 5
        # Verify backend is running
        curl -f http://localhost:8000/healthz || exit 1
      env:
        DATABASE_URL: sqlite:///./test.db

    - name: Build and start frontend
      working-directory: ./frontend
      run: |
        npm run build
        npm run preview -- --port 5173 --host 0.0.0.0 &
        echo $! > frontend.pid
        sleep 5
        # Verify frontend is running
        curl -f http://localhost:5173 || exit 1

    - name: Run E2E tests
      working-directory: ./frontend
      run: npx playwright test

    - name: Stop servers
      if: always()
      working-directory: ./frontend
      run: |
        if [ -f frontend.pid ]; then
          kill $(cat frontend.pid) || true
          rm frontend.pid
        fi
        if [ -f ../backend/backend.pid ]; then
          kill $(cat ../backend/backend.pid) || true
          rm ../backend/backend.pid
        fi

    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/playwright-report/
          frontend/test-results/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload security scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: trivy-results.sarif
        retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Upload Docker build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-build-logs
        path: |
          /tmp/.buildx-cache/
        retention-days: 7

  deployment:
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        # Add your deployment logic here
        # This could be deploying to AWS, GCP, Azure, etc.

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-logs
        path: |
          deployment.log
        retention-days: 90

  notify:
    runs-on: ubuntu-latest
    needs: [deployment]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        echo "ðŸ“§ Sending deployment notification..."
        # Add notification logic (Slack, email, etc.)